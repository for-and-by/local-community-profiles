{
  "version": 3,
  "sources": ["../../../../../app/routes/report/$id/edit.tsx"],
  "sourcesContent": ["import React from \"react\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\nimport { Link, useMatches, useNavigation, useSubmit } from \"@remix-run/react\";\n\nimport type {\n  FormUpdateValues,\n  Report,\n  ReportContent,\n} from \"@safer-streets/db\";\n\nimport type { SubmitHandler } from \"react-hook-form\";\nimport { FormProvider, useForm } from \"react-hook-form\";\n\nimport { parseImageUrl, prepareImageData } from \"~/lib/image\";\nimport { getIsoNow } from \"@safer-streets/utils\";\n\nimport Toast from \"~/components/regions/toast\";\nimport Footer from \"~/components/regions/footer\";\n\nimport SeverityField from \"~/components/fields/severity-field\";\nimport TypeField from \"~/components/fields/type-field\";\nimport CustomField from \"~/components/fields/custom-field\";\nimport DetailsField from \"~/components/fields/details-field\";\nimport ImageField from \"~/components/fields/image-field\";\n\n/*\n *   This action takes the content of the update form,\n *   creates a new content row and appends it to the report\n * */\n\nexport const action: ActionFunction = async ({ request, params, context }) => {\n  if (!params.id) return null;\n\n  const form = await request.formData();\n  const data = form.get(\"update\");\n  if (typeof data !== \"string\") return null;\n  const values = JSON.parse(data);\n\n  const supabase = context.getSupabase();\n\n  // If there's an image, upload it, return the ID\n  let image: string | undefined = undefined;\n  if (values.image) {\n    const { file, location, options } = prepareImageData(values.image);\n\n    const upload = await supabase.storage\n      .from(\"users\")\n      .upload(location, file, options);\n\n    if (upload.error) throw upload.error;\n    if (!upload.data) throw \"No data returned\";\n\n    const url = supabase.storage.from(\"users\").getPublicUrl(upload.data.path);\n    if (!url.data) throw \"No url generated\";\n\n    image = url.data.publicUrl;\n  }\n\n  const report = await supabase\n    .from(\"reports\")\n    .select(\"content_id\")\n    .eq(\"id\", params.id)\n    .single();\n\n  if (report.error) throw report.error.message;\n  if (!report.data) throw `No report with id ${values.id} found`;\n\n  const content = await supabase\n    .from(\"reports_content\")\n    .select()\n    .eq(\"id\", report.data.content_id)\n    .limit(1)\n    .single();\n\n  if (content.error) throw content.error;\n  if (!content.data) throw `Content ${report.data.content_id} not found.`;\n\n  const { id: _, created_at: __, ...clonedData } = content.data;\n\n  const newData: Partial<ReportContent> = {};\n  if (image) newData.image_url = image;\n  if (values.severity) newData.severity_handle = values.severity;\n  if (values.details) newData.details = values.details;\n\n  const clone = await supabase\n    .from(\"reports_content\")\n    .insert({ ...clonedData, ...newData })\n    .select()\n    .limit(1)\n    .single();\n\n  if (clone.error) throw clone.error;\n  if (!clone.data) throw \"No data was returned from content creation\";\n\n  const updateData: Partial<Report> = {\n    content_id: clone.data.id,\n    updated_at: getIsoNow(),\n  };\n\n  if (values.type) updateData.type_handle = values.type;\n\n  const update = await supabase\n    .from(\"reports\")\n    .update(updateData)\n    .eq(\"id\", params.id);\n\n  if (update.error) throw update.error;\n\n  return redirect(`/report/${params.id}`);\n};\n\nexport default function ReportEditTemplate() {\n  const { state } = useNavigation();\n  const submit = useSubmit();\n\n  const [, loader] = useMatches();\n  const data = loader.data.report;\n\n  const methods = useForm<FormUpdateValues>({\n    defaultValues: {\n      type: data.type_handle,\n      severity: data.content.severity_handle,\n      image: parseImageUrl(data.content.image_url),\n      details: data.content.details,\n    },\n    mode: \"onChange\",\n  });\n\n  //  This is required for the value to be correct.\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const invoke = methods.formState.dirtyFields;\n\n  const onSubmit: SubmitHandler<any> = (values) => {\n    const { dirtyFields } = methods.formState;\n    const dirtyValues = Object.keys(values).reduce((obj, key) => {\n      const value = values[key as keyof FormUpdateValues];\n      const isDirty = dirtyFields[key as keyof FormUpdateValues];\n      return isDirty ? { ...obj, [key]: value } : obj;\n    }, {});\n\n    submit(\n      { update: JSON.stringify(dirtyValues) },\n      { method: \"post\", action: `report/${data.id}/edit` }\n    );\n  };\n\n  return (\n    <>\n      <Toast content=\"Saving new details...\" show={state === \"submitting\"} />\n      <Footer>\n        <div className=\"max-h-[50vh] divide-y divide-gray-200 overflow-y-scroll\">\n          <div className=\"p-3\">\n            <p>Update the details of this report</p>\n          </div>\n          <FormProvider {...methods}>\n            <div className=\"flex flex-col space-y-2 p-2\">\n              <ImageField />\n              <SeverityField />\n              <TypeField />\n              <CustomField />\n              <DetailsField />\n            </div>\n          </FormProvider>\n          <div className=\"sticky bottom-0 flex justify-between bg-white p-2 shadow-md\">\n            <Link to={`/report/${data.id}`} className=\"btn btn-light\">\n              <p className=\"btn-text\">Cancel</p>\n            </Link>\n            <button\n              className=\"btn btn-primary\"\n              onClick={methods.handleSubmit(onSubmit)}\n            >\n              <p className=\"btn-text\">Save</p>\n            </button>\n          </div>\n        </div>\n      </Footer>\n    </>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoJI;AApCW,SAAR,qBAAsC;AAC3C,QAAM,EAAE,MAAM,IAAI,cAAc;AAChC,QAAM,SAAS,UAAU;AAEzB,QAAM,CAAC,EAAE,MAAM,IAAI,WAAW;AAC9B,QAAM,OAAO,OAAO,KAAK;AAEzB,QAAM,UAAU,QAA0B;AAAA,IACxC,eAAe;AAAA,MACb,MAAM,KAAK;AAAA,MACX,UAAU,KAAK,QAAQ;AAAA,MACvB,OAAO,cAAc,KAAK,QAAQ,SAAS;AAAA,MAC3C,SAAS,KAAK,QAAQ;AAAA,IACxB;AAAA,IACA,MAAM;AAAA,EACR,CAAC;AAID,QAAM,SAAS,QAAQ,UAAU;AAEjC,QAAM,WAA+B,CAAC,WAAW;AAC/C,UAAM,EAAE,YAAY,IAAI,QAAQ;AAChC,UAAM,cAAc,OAAO,KAAK,MAAM,EAAE,OAAO,CAAC,KAAK,QAAQ;AAC3D,YAAM,QAAQ,OAAO;AACrB,YAAM,UAAU,YAAY;AAC5B,aAAO,UAAU,EAAE,GAAG,KAAK,CAAC,MAAM,MAAM,IAAI;AAAA,IAC9C,GAAG,CAAC,CAAC;AAEL;AAAA,MACE,EAAE,QAAQ,KAAK,UAAU,WAAW,EAAE;AAAA,MACtC,EAAE,QAAQ,QAAQ,QAAQ,UAAU,KAAK,UAAU;AAAA,IACrD;AAAA,EACF;AAEA,SACE,sFACE;AAAA,uDAAC,iBAAM,SAAQ,yBAAwB,MAAM,UAAU,gBAAvD;AAAA;AAAA;AAAA;AAAA,WAAqE;AAAA,IACrE,mDAAC,kBACC,6DAAC,SAAI,WAAU,2DACb;AAAA,yDAAC,SAAI,WAAU,OACb,6DAAC,OAAE,iDAAH;AAAA;AAAA;AAAA;AAAA,aAAoC,KADtC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,gBAAc,GAAG,SAChB,6DAAC,SAAI,WAAU,+BACb;AAAA,2DAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,eAAY;AAAA,QACZ,mDAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,eAAe;AAAA,QACf,mDAAC,eAAD;AAAA;AAAA;AAAA;AAAA,eAAW;AAAA,QACX,mDAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,eAAa;AAAA,QACb,mDAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,eAAc;AAAA,WALhB;AAAA;AAAA;AAAA;AAAA,aAMA,KAPF;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,MACA,mDAAC,SAAI,WAAU,+DACb;AAAA,2DAAC,QAAK,IAAI,WAAW,KAAK,MAAM,WAAU,iBACxC,6DAAC,OAAE,WAAU,YAAW,sBAAxB;AAAA;AAAA;AAAA;AAAA,eAA8B,KADhC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA;AAAA,UAAC;AAAA;AAAA,YACC,WAAU;AAAA,YACV,SAAS,QAAQ,aAAa,QAAQ;AAAA,YAEtC,6DAAC,OAAE,WAAU,YAAW,oBAAxB;AAAA;AAAA;AAAA;AAAA,mBAA4B;AAAA;AAAA,UAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAKA;AAAA,WATF;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,SAvBF;AAAA;AAAA;AAAA;AAAA,WAwBA,KAzBF;AAAA;AAAA;AAAA;AAAA,WA0BA;AAAA,OA5BF;AAAA;AAAA;AAAA;AAAA,SA6BA;AAEJ;",
  "names": []
}
