{
  "version": 3,
  "sources": ["../../../app/routes/search.tsx", "../../../../../node_modules/nanoid/index.browser.js"],
  "sourcesContent": ["import type { ChangeEventHandler, KeyboardEventHandler } from \"react\";\nimport { useRef } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport type { ActionFunction, MetaFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Link,\n  useActionData,\n  useNavigate,\n  useNavigation,\n  useSubmit,\n} from \"@remix-run/react\";\n\nimport { formatMetadata } from \"~/utils/seo\";\nimport { geocode } from \"~/lib/maplibre\";\n\nimport { useMapCenter } from \"~/hooks/map/use-map-center\";\n\nimport Toast from \"~/components/regions/toast\";\nimport Header from \"~/components/regions/header\";\nimport Body from \"~/components/regions/body\";\nimport Footer from \"~/components/regions/footer\";\n\nimport { FindSelfButton } from \"~/components/atoms/find-self-button\";\nimport { Bumper } from \"~/components/atoms/bumper\";\nimport Text from \"~/components/inputs/text\";\n\nimport type { SearchFeature } from \"~/types/search\";\n\nexport const meta: MetaFunction = () => {\n  return formatMetadata({\n    title: \"Search\",\n  });\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const data = await request.formData();\n\n  const query = data.get(\"query\");\n  const lng = data.get(\"lng\");\n  const lat = data.get(\"lat\");\n\n  const hasQuery = query && typeof query === \"string\";\n  const hasLngLat =\n    lng && lat && typeof lng === \"string\" && typeof lat === \"string\";\n\n  const features = hasQuery\n    ? await geocode(query)\n    : hasLngLat\n    ? await geocode([parseFloat(lng), parseFloat(lat)])\n    : [];\n\n  return json({\n    results: features,\n    resultsCount: features.length,\n    isEmpty: features.length === 0,\n  });\n};\n\nexport default function Search() {\n  const submit = useSubmit();\n  const search = useActionData();\n  const { state } = useNavigation();\n  const navigate = useNavigate();\n\n  const [, setCenter] = useMapCenter();\n\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | undefined>(\n    undefined\n  );\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = setTimeout(() => {\n      submit(\n        { query: event.target.value },\n        { method: \"post\", action: \"/search\" }\n      );\n    }, 400);\n  };\n\n  const handleKeyDown: KeyboardEventHandler<HTMLInputElement> = () => {\n    clearTimeout(timeoutRef.current);\n  };\n\n  const handleClickResult = (feature: SearchFeature) => {\n    if (feature.center) setCenter(feature.center);\n    navigate(\"/\");\n  };\n\n  const hasNoResults = !search || search.isEmpty;\n\n  return (\n    <>\n      <Toast content=\"Finding results...\" show={state === \"submitting\"} />\n      <Header>\n        <div className=\"flex flex-row items-center bg-white p-2\">\n          <Link to=\"/\" className=\"btn btn-light\">\n            <i className=\"btn-icon icon icon-arrow-left\" />\n          </Link>\n          <div className=\"flex flex-col px-3\">\n            <h3 className=\"text-base text-base-700\">\n              {hasNoResults ? \"No\" : search.resultsCount} results found\n            </h3>\n            <p className=\"text-sm text-base-400\">\n              {hasNoResults\n                ? \"Type in an address below.\"\n                : \"Select a location to jump to.\"}\n            </p>\n          </div>\n        </div>\n      </Header>\n      <Body>\n        <Bumper isShow={!search?.isEmpty}>\n          <div className=\"flex max-h-48 flex-col items-center divide-y divide-base-100 overflow-y-scroll bg-white\">\n            {search?.results.map((feature: SearchFeature) =>\n              feature.center ? (\n                <button\n                  key={nanoid()}\n                  onClick={() => handleClickResult(feature)}\n                  className=\"flex w-full flex-col bg-white p-3 transition-all hover:cursor-pointer hover:bg-gray-100\"\n                >\n                  <p className=\"text-base text-base-700\">{feature.heading}</p>\n                  <p className=\"text-sm text-base-400\">{feature.subheading}</p>\n                </button>\n              ) : null\n            )}\n          </div>\n        </Bumper>\n      </Body>\n      <Footer>\n        <div className=\"flex flex-row items-center space-x-2 bg-white p-2\">\n          <Text\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            icon=\"icon-search\"\n            placeholder=\"Search for an address...\"\n          />\n          <FindSelfButton onFound={() => navigate(\"/\")} />\n        </div>\n      </Footer>\n    </>\n  );\n}\n", "import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],
  "mappings": "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",
  "names": []
}
