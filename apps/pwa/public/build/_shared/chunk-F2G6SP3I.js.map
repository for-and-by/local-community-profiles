{
  "version": 3,
  "sources": ["../../../../../node_modules/src/index.ts", "../../../app/lib/image.ts"],
  "sourcesContent": ["const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n// Use a lookup table to find the index.\nconst lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (let i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\n\nexport const encode = (arraybuffer: ArrayBuffer): string => {\n    let bytes = new Uint8Array(arraybuffer),\n        i,\n        len = bytes.length,\n        base64 = '';\n\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    } else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n\n    return base64;\n};\n\nexport const decode = (base64: string): ArrayBuffer => {\n    let bufferLength = base64.length * 0.75,\n        len = base64.length,\n        i,\n        p = 0,\n        encoded1,\n        encoded2,\n        encoded3,\n        encoded4;\n\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    const arraybuffer = new ArrayBuffer(bufferLength),\n        bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n};\n", "import { decode } from \"base64-arraybuffer\";\n\nexport function resizeImage(image: HTMLImageElement) {\n  const canvas = document.createElement(\"canvas\");\n  const maxWidth = 720;\n\n  let { height, width } = image;\n\n  if (image.width > maxWidth) {\n    height = Math.round((height * maxWidth) / width);\n    width = maxWidth;\n  }\n\n  canvas.width = width;\n  canvas.height = height;\n\n  const context = canvas.getContext(\"2d\");\n  if (!context) return;\n\n  context.drawImage(image, 0, 0, width, height);\n  return canvas.toDataURL(\"image/jpeg\", 0.7);\n}\n\nexport function parseFileAsBase64(file: File) {\n  return new Promise<string>((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n\n    reader.onload = (event) => {\n      if (!event?.target?.result) {\n        reject(\"Target couldn't be processed\");\n        return;\n      }\n\n      const blob = new Blob([event.target.result]);\n      const url = URL.createObjectURL(blob);\n      const image = new Image();\n\n      image.src = url;\n      image.onload = () => {\n        const resized = resizeImage(image);\n        if (!resized) reject(\"Image could not be resized\");\n        else resolve(resized);\n      };\n    };\n    reader.onerror = (error) => reject(error);\n  });\n}\n\ninterface Options {\n  width?: number;\n  height?: number;\n  quality?: number;\n}\n\nexport function parseImageUrl(url?: string | null, options?: Options) {\n  if (!url) return undefined;\n\n  const image = new URL(url?.replace(\"/users/users\", \"/users\"));\n  if (options?.width) {\n    image.searchParams.set(\"width\", options.width.toString());\n  }\n  if (options?.height) {\n    image.searchParams.set(\"height\", options.height.toString());\n  }\n  if (options?.quality) {\n    image.searchParams.set(\"quality\", options.quality.toString());\n  }\n\n  return image.toString();\n}\n\nexport function prepareImageData(image: string) {\n  const timestamp = Date.now();\n  const filename = `report-img-${timestamp}.jpeg`;\n  const base64 = image.split(\",\")[1];\n\n  const file = decode(base64);\n  const location = `reports/${filename}`;\n  const options = {\n    contentType: \"image/jpeg\",\n  };\n\n  return { file, location, options };\n}\n"],
  "mappings": ";AAAA,IAAM,QAAQ;AAGd,IAAM,SAAS,OAAO,eAAe,cAAc,CAAA,IAAK,IAAI,WAAW,GAAG;AAC1E,KAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,SAAO,MAAM,WAAW,CAAC,KAAK;;AADzB;;;ACFF,SAAS,YAAY,OAAyB;AACnD,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,QAAM,WAAW;AAEjB,MAAI,EAAE,QAAQ,MAAM,IAAI;AAExB,MAAI,MAAM,QAAQ,UAAU;AAC1B,aAAS,KAAK,MAAO,SAAS,WAAY,KAAK;AAC/C,YAAQ;AAAA,EACV;AAEA,SAAO,QAAQ;AACf,SAAO,SAAS;AAEhB,QAAM,UAAU,OAAO,WAAW,IAAI;AACtC,MAAI,CAAC;AAAS;AAEd,UAAQ,UAAU,OAAO,GAAG,GAAG,OAAO,MAAM;AAC5C,SAAO,OAAO,UAAU,cAAc,GAAG;AAC3C;AAEO,SAAS,kBAAkB,MAAY;AAC5C,SAAO,IAAI,QAAgB,CAAC,SAAS,WAAW;AAC9C,UAAM,SAAS,IAAI,WAAW;AAE9B,WAAO,kBAAkB,IAAI;AAE7B,WAAO,SAAS,CAAC,UAAU;AA7B/B;AA8BM,UAAI,GAAC,oCAAO,WAAP,mBAAe,SAAQ;AAC1B,eAAO,8BAA8B;AACrC;AAAA,MACF;AAEA,YAAM,OAAO,IAAI,KAAK,CAAC,MAAM,OAAO,MAAM,CAAC;AAC3C,YAAM,MAAM,IAAI,gBAAgB,IAAI;AACpC,YAAM,QAAQ,IAAI,MAAM;AAExB,YAAM,MAAM;AACZ,YAAM,SAAS,MAAM;AACnB,cAAM,UAAU,YAAY,KAAK;AACjC,YAAI,CAAC;AAAS,iBAAO,4BAA4B;AAAA;AAC5C,kBAAQ,OAAO;AAAA,MACtB;AAAA,IACF;AACA,WAAO,UAAU,CAAC,UAAU,OAAO,KAAK;AAAA,EAC1C,CAAC;AACH;AAQO,SAAS,cAAc,KAAqB,SAAmB;AACpE,MAAI,CAAC;AAAK,WAAO;AAEjB,QAAM,QAAQ,IAAI,IAAI,2BAAK,QAAQ,gBAAgB,SAAS;AAC5D,MAAI,mCAAS,OAAO;AAClB,UAAM,aAAa,IAAI,SAAS,QAAQ,MAAM,SAAS,CAAC;AAAA,EAC1D;AACA,MAAI,mCAAS,QAAQ;AACnB,UAAM,aAAa,IAAI,UAAU,QAAQ,OAAO,SAAS,CAAC;AAAA,EAC5D;AACA,MAAI,mCAAS,SAAS;AACpB,UAAM,aAAa,IAAI,WAAW,QAAQ,QAAQ,SAAS,CAAC;AAAA,EAC9D;AAEA,SAAO,MAAM,SAAS;AACxB;",
  "names": []
}
