{
  "version": 3,
  "sources": ["../../../app/lib/maplibre.ts", "../../../app/errors.ts", "../../../app/components/atoms/find-self-button.tsx"],
  "sourcesContent": ["import type { LngLatLike } from \"maplibre-gl\";\nimport type { Feature, FeatureCollection } from \"geojson\";\n\nimport { config } from \"~/config\";\n\nimport type {\n  ContextItem,\n  ContextObject,\n  SearchFeature,\n  SearchResult,\n} from \"~/types/search\";\n\nimport type { Report, ReportResult } from \"@safer-streets/db\";\n\nexport function parseContextAsString(context: ContextItem[]) {\n  const contextObj = context.reduce((obj, feature) => {\n    if (feature?.id) {\n      const [type, id] = feature.id.split(\".\");\n      return Object.assign(obj, {\n        [type]: {\n          ...feature,\n          type,\n          id,\n        },\n      });\n    } else {\n      return obj;\n    }\n  }, {} as ContextObject);\n\n  return [\n    contextObj?.street?.text ??\n      contextObj?.municipality?.text ??\n      contextObj?.joint_municipality?.text ??\n      contextObj.place?.text ??\n      null,\n    contextObj?.region?.text ?? null,\n    contextObj?.postal_code?.text ?? null,\n  ]\n    .filter((i) => !!i)\n    .join(\", \");\n}\n\nexport function parseFeatureAsAddress(feature: SearchResult) {\n  return [feature?.address ?? null, feature?.text ?? null]\n    .filter((i) => !!i)\n    .join(\" \");\n}\n\nexport function parseLngLat(value: LngLatLike | number[]): [number, number] {\n  return Array.isArray(value)\n    ? [value[0], value[1]]\n    : typeof value === \"object\" && \"lon\" in value\n    ? [value.lon, value.lat]\n    : typeof value === \"object\" && \"lng\" in value\n    ? [value.lng, value.lat]\n    : value;\n}\n\nexport async function geocode(\n  query: LngLatLike | string\n): Promise<SearchFeature[]> {\n  const parsedQuery =\n    typeof query !== \"string\"\n      ? parseLngLat(query)?.join(\",\") ?? undefined\n      : query;\n\n  if (!parsedQuery)\n    throw new Error(\"Provided query was not useable for search\");\n\n  const url = new URL(\n    `https://api.maptiler.com/geocoding/${encodeURIComponent(parsedQuery)}.json`\n  );\n\n  url.search = new URLSearchParams({\n    key: config.map.key,\n    bbox: config.map.bbox.join(\",\"),\n  }).toString();\n\n  const response = await fetch(url.toString());\n  const json = (await response.json()) as any;\n\n  return (\n    json?.features?.map((feature: SearchResult) => {\n      return {\n        center: feature?.center,\n        type: feature?.place_type?.[0],\n        heading: parseFeatureAsAddress(feature),\n        subheading: parseContextAsString(feature?.context ?? []),\n      };\n    }) ?? []\n  );\n}\n\nexport function parseReportsAsGeoJSON(\n  reports: ReportResult[],\n  callback: (report: Report) => Feature\n): FeatureCollection {\n  return {\n    type: \"FeatureCollection\",\n    features: reports.map((report) => callback(report)),\n  };\n}\n", "export const CANT_ZOOM_IN =\n  \"You've zoomed in to the max. Try zooming out instead\";\n\nexport const CANT_ZOOM_OUT =\n  \"You've zoomed out to the max. Try zooming out instead\";\n\nexport const CANT_GEOLOCATE = \"Geolocation not available on this browser.\";\n", "import { CANT_GEOLOCATE } from \"~/errors\";\n\nimport { useMapCenter } from \"~/hooks/map/use-map-center\";\nimport { useAsyncAction } from \"~/hooks/use-async-action\";\n\nimport Toast from \"~/components/regions/toast\";\n\ntype Props = {\n  onFound?: () => void;\n};\n\nexport function FindSelfButton(props: Props) {\n  const { onFound } = props;\n\n  const [, setCenter] = useMapCenter();\n  const { isLoading, handleAsyncAction } = useAsyncAction({\n    action: () => {\n      return new Promise<GeolocationPosition>((resolve, reject) => {\n        if (!(navigator && \"geolocation\" in navigator)) reject(CANT_GEOLOCATE);\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    },\n    onSuccess: (data) => {\n      const { longitude, latitude } = data.coords;\n      if (onFound) onFound();\n      setCenter([longitude, latitude]);\n    },\n  });\n\n  return (\n    <button className=\"btn btn-primary\" onClick={handleAsyncAction}>\n      <Toast show={isLoading} content=\"Finding your location...\" />\n      <i className=\"btn-icon icon icon-find-self\" />\n    </button>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAiDO,SAAS,YAAY,OAAgD;AAC1E,SAAO,MAAM,QAAQ,KAAK,IACtB,CAAC,MAAM,IAAI,MAAM,EAAE,IACnB,OAAO,UAAU,YAAY,SAAS,QACtC,CAAC,MAAM,KAAK,MAAM,GAAG,IACrB,OAAO,UAAU,YAAY,SAAS,QACtC,CAAC,MAAM,KAAK,MAAM,GAAG,IACrB;AACN;;;ACnDO,IAAM,iBAAiB;;;ACyBxB;AApBC,SAAS,eAAe,OAAc;AAC3C,QAAM,EAAE,QAAQ,IAAI;AAEpB,QAAM,CAAC,EAAE,SAAS,IAAI,aAAa;AACnC,QAAM,EAAE,WAAW,kBAAkB,IAAI,eAAe;AAAA,IACtD,QAAQ,MAAM;AACZ,aAAO,IAAI,QAA6B,CAAC,SAAS,WAAW;AAC3D,YAAI,EAAE,aAAa,iBAAiB;AAAY,iBAAO,cAAc;AACrE,kBAAU,YAAY,mBAAmB,SAAS,MAAM;AAAA,MAC1D,CAAC;AAAA,IACH;AAAA,IACA,WAAW,CAAC,SAAS;AACnB,YAAM,EAAE,WAAW,SAAS,IAAI,KAAK;AACrC,UAAI;AAAS,gBAAQ;AACrB,gBAAU,CAAC,WAAW,QAAQ,CAAC;AAAA,IACjC;AAAA,EACF,CAAC;AAED,SACE,mDAAC,YAAO,WAAU,mBAAkB,SAAS,mBAC3C;AAAA,uDAAC,iBAAM,MAAM,WAAW,SAAQ,8BAAhC;AAAA;AAAA;AAAA;AAAA,WAA2D;AAAA,IAC3D,mDAAC,OAAE,WAAU,kCAAb;AAAA;AAAA;AAAA;AAAA,WAA4C;AAAA,OAF9C;AAAA;AAAA;AAAA;AAAA,SAGA;AAEJ;",
  "names": []
}
